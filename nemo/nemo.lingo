program = decl*:d oper:o {NemoProg(:d, :o)};

// Types
decl = ws "var" ws letters$l ws type:t  ws {NemoVarDecl($l, :t)};
type  = Int | Array;
Int = ws "int" ws {NemoIntType()};
Array = ws "[" type:t "]" ws {NemoArrayType(:t)};

// Operations
oper = assign | print | ifelse | if  | while | seq;
assign = ws var:v "=" expr:e  ws {NemoAssign(:v, :e)};
print = ws "print" ws "(" expr:e ")" ws {NemoPrint(:e)};

if = ws "if" ws "(" expr:l logOp$o expr:r ")"
    ws oper:ifop ws {ifSemanticAct($o, :l, :r, :ifop)};
ifelse = ws "if" ws "(" expr:l logOp$o expr:r ")"
    ws oper:ifop ws "else" oper:elseop ws {ifelseSemanticAct($o, :l, :r, :ifop, :elseop)};
while = ws "while" ws "(" expr:l logOp$o expr:r ")"
    ws oper:b ws {whileSemanticAct($o, :l, :r, :b)};

seq = ws "{" oper:l ws oper*:o  "}" ws {seqSemanticAct(:l, :o)};

// Expressions
expr = const | var | binop | app | upd | string;
const = ws digits$d ws {NemoConst(s2i($d))};
var = ws letters$l ws {NemoVar($l)};
binop = ws "(" expr:l arithmeticOp$s expr:r ")" ws {NemoBinOp($s, :l, :r)};
app  = ws "(" ws "app" ws "(" expr:l "," expr:r ")" ws ")" ws {NemoApp(:l, :r)};
upd = ws "(" ws "upd" ws "(" expr:l "," expr:m "," expr:r ")" ws ")" ws {NemoUpd(:l, :m, :r)};
string = ws "\"" (digits | letters)*:str "\"" ws {NemoString(:str)};

// Base
digits = ('0'-'9')+;
letters = ('a'-'z'| 'A'-'Z')+;
logOp = ("==" | "<=" | ">=" | "<" | ">" | "!=");
arithmeticOp = ("+" | "*" | "/" | "-" | "%");

// Whitespace
ws = (' ' | '\t' | '\n' | '\r')*;