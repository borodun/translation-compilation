import lingo/pegcode/driver;

export {
    NemoType ::= NemoIntType, NemoArrayType;
    NemoIntType();
    NemoArrayType(type: NemoType);

    NemoExpr ::= NemoBinOp, NemoConst, NemoApp, NemoUpd, NemoVar;
    NemoBinOp(op: string, le: NemoExpr, re: NemoExpr);
    NemoConst(val: int);
    NemoApp(ae: NemoExpr, ie: NemoExpr);
    NemoUpd(ae: NemoExpr, ie: NemoExpr, ve: NemoExpr);
    NemoVar(name: string);

    NemoOper ::= NemoCond, NemoSeq, NemoPrint, NemoAssign, NemoChoice, NemoLoop;
    NemoCond(op: string, le: NemoExpr, re: NemoExpr);
    NemoSeq(o: [NemoOper]);
    NemoPrint(e: NemoExpr);
    NemoAssign(var: NemoVar, val: NemoExpr);
    NemoChoice(o: [NemoOper]);
    NemoLoop(o: NemoOper);
    
    NemoVarDecl(name: string, type: NemoType);

    NemoProg(decls: [NemoVarDecl], operators: NemoOper);

    str2nemoProg(s: string) ->Maybe<NemoProg>;
    printNemoProg(p: NemoProg) -> void;
    nemoProg2str(p: NemoProg) -> string;
}

seqSemanticAct(xs: [flow]) -> NemoSeq {
    NemoSeq(concat([xs[0]], xs[1]))
}

negate(o: string) -> string {
    if(o == "==") "!="
    else if(o == "<=") ">"
    else if(o == ">=") "<"
    else if(o == "<") ">="
    else if(o == ">") "<="
    else if(o == "!=") "=="
    else o
}

ifSemanticAct(xs: [flow]) -> NemoChoice {
    NemoChoice([NemoSeq([NemoCond(xs[0], xs[1], xs[2]), xs[3]]),
        NemoSeq([NemoCond(negate(xs[0]), xs[1], xs[2])])])
}

ifelseSemanticAct(xs: [flow]) -> NemoChoice {
    NemoChoice([NemoSeq([NemoCond(xs[0], xs[1], xs[2]), xs[3]]),
        NemoSeq([NemoCond(negate(xs[0]), xs[1], xs[2]), xs[4]])])
}

whileSemanticAct(xs: [flow]) -> NemoSeq {
    NemoSeq([NemoLoop(NemoSeq([NemoCond(xs[0], xs[1], xs[2]), xs[3]])),
        NemoCond(negate(xs[0]), xs[1], xs[2])])
}

str2nemoProg(s: string) -> Maybe<NemoProg> {
    pegActions = {
        t1 = setTree(defaultPegActions.t, "seqSemanticAct", seqSemanticAct);
        t2 = setTree(t1, "ifSemanticAct", ifSemanticAct);
        t3 = setTree(t2, "ifelseSemanticAct", ifelseSemanticAct);
        t4 = setTree(t3, "whileSemanticAct", whileSemanticAct);
        SemanticActions(t4);
    }
    gram = "#include nemo/nemo.lingo";
    result = parsic3(compilePegGrammar(gram), s, pegActions, NemoProg([NemoVarDecl("x", NemoIntType())], NemoAssign(NemoVar("x"), NemoConst(0))));
    if (result.third == "") {
        Some(result.first);
    }
    else{ 
        println("Error on position "+ i2s(result.second) + ":\n" + result.third);
        None();
    }
}

nemoType2str(t: NemoType) -> string {
    switch(t) {
        NemoIntType(): "int"
        NemoArrayType(next): "[" + nemoType2str(next) + "]"
    }
}

nemoExpr2str(e: NemoExpr) -> string {
    switch(e) {
        NemoBinOp(op, le, re): "(" + nemoExpr2str(le) + op + nemoExpr2str(re) + ")"
        NemoApp(ae, ie): "app(" + nemoExpr2str(ae) + "," + nemoExpr2str(ie) + ")"
        NemoUpd(ae, ie, ve): "upd(" + nemoExpr2str(ae) + "," + nemoExpr2str(ie) + "," + nemoExpr2str(ve) + ")"
        NemoConst(v): i2s(v)
        NemoVar(name): name
    }
}

nemoOper2str(o: NemoOper) -> string {
    switch(o) {
        NemoCond(op, l, r): "(" + nemoExpr2str(l) + " " + op + " " + nemoExpr2str(r) + ")?"
        NemoPrint(e): "print(" + nemoExpr2str(e) + ")"
        NemoAssign(var, val): "(" + nemoExpr2str(var) + " = " + nemoExpr2str(val) + ")"
        NemoLoop(l): nemoOper2str(l) + "*"
        NemoSeq(s): "{" + fold(s, "", \ acc, v -> acc + "; " + nemoOper2str(v)) + "}"
        NemoChoice(c): "{" + fold(c, "", \ acc, v -> acc + " U " + nemoOper2str(v)) + "}"
    }
}

printNemoProg(p: NemoProg) -> void {
    iter(p.decls, \v -> println("var " + v.name + ": " + nemoType2str(v.type)  + ";"));
    println(nemoOper2str(p.operators));
}

nemoProg2str(p: NemoProg) -> string {
    fold(p.decls, "", \ acc, v -> { acc + "var " + v.name + ": " + nemoType2str(v.type)  + ";\n" })
    +
    nemoOper2str(p.operators)
}