import vm/parser;
import ds/array;
import ds/dlist;

export {
    exec(prog: VnemoProg) -> DList<Node>;
}

Node(label: int, values: Tree<string, Value>);
Value ::= ValueInt, ValueArr;
ValueInt(v: int);
ValueArr(arr: [Value]);

calculate(op: string, l: Value, r: Value) -> Maybe<int> {
    switch(l) {
        ValueArr(al): None();
        ValueInt(vl): switch(r) {
            ValueArr(ar): None();
            ValueInt(vr): {
                if(op == "+") Some(vl + vr)
                else if(op == "-") Some(vl - vr)
                else if(op == "*") Some(vl * vr)
                else if(op == "/") if(vr != 0) Some(vl / vr) else None()
                else if(op == "%") Some(vl % vr)
                else None()
            }
        }
    }
}

solveExpr(e: VnemoExpr, t: Tree<string, Value>) -> Maybe<Value> {
    switch(e) {
        VnemoBinOp(op, l, r): {
            ret : Maybe<Value> = switch(solveExpr(l, t)) {
            None(): None();
            Some(lv): 
                switch(solveExpr(r, t)) {
                None(): None();
                Some(rv): 
                    switch(calculate(op, lv, rv)) {
                    None(): None();
                    Some(res): Some(ValueInt(res));
                    }
                }
            }
            ret;
        }
        VnemoApp(a, i): 
            switch(solveExpr(a, t)) {
            None(): None();
            Some(v): 
                switch(v) {
                ValueInt(val): None();
                ValueArr(arr): 
                    switch(solveExpr(i, t)) {
                    None(): None();
                    Some(vi): 
                        switch(vi) {
                        ValueArr(ai): None();
                        ValueInt(idx):
                            if(idx < length(arr)) { Some(arr[idx]) }
                            else { None() }
                        }
                    }
                }
            }
        VnemoUpd(a, i, v): 
            switch(solveExpr(a, t)) {
            None(): None();
            Some(val): 
                switch(val) {
                ValueInt(value): None();
                ValueArr(arr): 
                    switch(solveExpr(i, t)) {
                    None(): None();
                    Some(vi): 
                        switch(vi) {
                        ValueArr(ai): None();
                        ValueInt(idx): 
                            switch(solveExpr(v, t)) {
                            None(): None();
                            Some(res_v): {
                                if(idx < length(arr)) { Some(ValueArr(replace(arr, idx, res_v))) }
                                else if(idx == length(arr)) { Some(ValueArr(concat(arr, [res_v]))) }
                                else { None() }
                                }
                            }
                        }
                    }
                }
            }
        VnemoConst(val): Some(ValueInt(val));
        VnemoVar(name): lookupTree(t, name);
    }
}

checkCond(o: VnemoCond, t: Tree<string, Value>) -> Maybe<bool> {
    switch(solveExpr(o.le, t)) {
        None(): None();
        Some(lExpr): 
        switch(solveExpr(o.re, t)) {
            None(): None();
            Some(rExpr): {
                if(o.op == "==") Some(lExpr == rExpr)
                else if(o.op == "<=") Some(lExpr <= rExpr)
                else if(o.op == ">=") Some(lExpr >= rExpr)
                else if(o.op == "<") Some(lExpr < rExpr)
                else if(o.op == ">") Some(lExpr > rExpr)
                else if(o.op == "!=") Some(lExpr != rExpr)
                else None()
            }
        }
    }
}

getOperByLabel(label: int, prog: VnemoProg) -> Maybe<VnemoOper> {
    find(prog.operators, \ oper -> {
        switch(oper) {
            VnemoIfElse(lab, cond, lm, rm): {
                if(lab == label) true
                else false
            }
            VnemoPrint(lab, e, labels): {
                if(lab == label) true
                else false
            }
            VnemoAssign(lab, var, val, labels): {
                if(lab == label) true
                else false
            }
        }
    })
}

arr2str(a: Value) -> string {
    switch(a) {
        ValueInt(v): i2s(v);
        ValueArr(arr): "[" + fold(arr, "", \ s, v -> {s + " " + arr2str(v)}) + "]";
    }
}

printTree(e: VnemoExpr, t: Tree<string, Value>) -> void {
    switch(solveExpr(e, t)) {
        None(): println("Bad expression!");
        Some(v): 
            switch(v) {
                ValueInt(val): println(val);
                ValueArr(arr): println(arr2str(v));
            }
    }
}

updateNode(node: Node, prog: VnemoProg) -> Pair<bool, DList<Node>> {
    oper = getOperByLabel(node.label, prog);
    result = switch(oper) {
        None(): Pair(false, Some([node]));
        Some(v): 
        switch(v) {
            VnemoIfElse(lab, cond, lm, rm): 
                switch(checkCond(cond, node.values)) {
                    None(): Pair(false, None());
                    Some(res): if(res) {
                        Pair(true, Some(map(lm, \ label -> { Node(label.val, node.values) })))
                    } else {
                        Pair(true, Some(map(rm, \ label -> { Node(label.val, node.values) })))
                    }
                }
            VnemoPrint(lab, e, labels): { 
                printTree(e, node.values);
                Pair(true, Some(map(labels, \ label -> { Node(label.val, node.values) })));
            }
            VnemoAssign(lab, var, e, labels): {
                switch(solveExpr(e, node.values)) {
                    None(): Pair(false, None());
                    Some(val): 
                        switch(lookupTree(node.values, var.name)) {
                            None(): Pair(false, None());
                            Some(var_val): {
                                upd_tree = setTree(node.values, var.name, val);
                                Pair(true, Some(map(labels, \ label -> { Node(label.val, upd_tree) })))
                            }
                        }
                }
            }
        }
    }
    arr : Maybe<[Node]> = result.second;
    ret = switch(arr) {
        None():makeDList();
        Some(array): fold(array, makeDList(), \ q, n -> { pushDList(q, n); q});
    }
    Pair(result.first, ret)
}

initVarsDefault(decls: [VnemoVarDecl]) -> Tree<string, Value> {
    fold(decls, makeTree(), \ tree, v -> switch(v.type) {
        VnemoIntType(): setTree(tree, v.name, ValueInt(0));
        VnemoArrayType(type): setTree(tree, v.name, ValueArr([]));
    })
}

exec(prog: VnemoProg) -> DList<Node> {
    node = Node(0, initVarsDefault(prog.decls));
    queue = makeDList();
    pushDList(queue, node);
    for(queue, \ q -> { !isEmptyDList(q) }, \ q -> {
        switch(popFirstDList(q)) {
            None(): makeDList();
            Some(v): {
                newQueue =  updateNode(v, prog);
                if(newQueue.first) {
                    concatDList(q, newQueue.second);
                    q
                } else { 
                    q 
                }
            }
        }
    });
}