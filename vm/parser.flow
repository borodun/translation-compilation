import runtime;
import string;
import lingo/pegcode/driver;
import math/math;

export {
    VnemoType ::= VnemoIntType, VnemoArrayType;
    VnemoIntType();
    VnemoArrayType(type: VnemoType);
    VnemoLabel(val: int);

    VnemoExpr ::= VnemoBinOp, VnemoConst, VnemoApp, VnemoUpd, VnemoVar;
    VnemoBinOp(op: string, le: VnemoExpr, re: VnemoExpr);
    VnemoConst(val: int);
    VnemoApp(ae: VnemoExpr, ie: VnemoExpr);
    VnemoUpd(ae: VnemoExpr, ie: VnemoExpr, ve: VnemoExpr);
    VnemoVar(name: string);

    VnemoOper ::= VnemoIfElse, VnemoPrint, VnemoAssign;
    VnemoCond(op: string, le: VnemoExpr, re: VnemoExpr);
    VnemoIfElse(mark: int, cond: VnemoCond, lm: [VnemoLabel], rm: [VnemoLabel]);
    VnemoPrint(mark: int, e: VnemoExpr, marks: [VnemoLabel]);
    VnemoAssign(mark: int, var: VnemoVar, val: VnemoExpr, marks: [VnemoLabel]);

    VnemoVarDecl(name: string, type: VnemoType);

    VnemoProg(decls: [VnemoVarDecl], operators: [VnemoOper]);

    str2vnemoProg(s: string) -> Maybe<VnemoProg>;
    printVnemoProg(p: VnemoProg) -> void;
    vnemoProg2str(p: VnemoProg) -> string;
}

str2vnemoProg(s: string) -> Maybe<VnemoProg> {
    gram = "#include vm/vm.lingo";
    result = parsic3(compilePegGrammar(gram), s, defaultPegActions, VnemoProg([VnemoVarDecl("x", VnemoIntType())], [VnemoAssign(0, VnemoVar("x"), VnemoConst(0), [VnemoLabel(0)])]));
    if (result.third == "") {
        Some(result.first);
    }
    else{ 
        println("Error on position "+ i2s(result.second) + ":\n" + result.third);
        None();
    }
}

type2str(t: VnemoType) -> string {
    switch(t) {
        VnemoIntType(): "int"
        VnemoArrayType(next): "[" + type2str(next) + "]"
    }
}

expr2str(e: VnemoExpr) -> string {
    switch(e) {
        VnemoBinOp(op, le, re): "(" + expr2str(le) + " " + op + " " + expr2str(re) + ")"
        VnemoApp(ae, ie): "(app(" + expr2str(ae) + ", " + expr2str(ie) + "))"
        VnemoUpd(ae, ie, ve): "(upd(" + expr2str(ae) + ", " + expr2str(ie) + ", " + expr2str(ve) + "))"
        VnemoConst(v): i2s(v)
        VnemoVar(name): name
    }
}

condOp2str(o: VnemoCond) -> string {
    expr2str(o.le) + " " + o.op + " " + expr2str(o.re)
}

oper2str(o: VnemoOper) -> string {
    switch(o) {
        VnemoIfElse(mark, cond, lm, rm): {
            lmStr = fold(map(lm, \v -> i2s(v.val)), "", \v, acc -> acc + ", " + v);
            rmStr = fold(map(rm, \v -> i2s(v.val)), "", \v, acc -> acc + ", " + v);
            i2s(mark) + ": " + "if (" + condOp2str(cond) + ") then goto {"
                + strSubRange(lmStr, 0, strlen(lmStr) - 2) + "} else goto {"
                + strSubRange(rmStr, 0, strlen(lmStr) - 2) + "}"
        }
        VnemoPrint(mark, e, marks): {
            marksStr = fold(map(marks, \v -> i2s(v.val)), "", \v, acc -> acc + ", " + v);
            i2s(mark) + ": " + "print(" + expr2str(e) + ")" +
                " goto {" + strSubRange(marksStr, 0, strlen(marksStr) - 2) + "}"
        }
        VnemoAssign(mark, var, val, marks): {
            marksStr = fold(map(marks, \v -> i2s(v.val)), "", \v, acc -> acc + ", " + v);
            i2s(mark) + ": " + expr2str(var) + " = " + expr2str(val) +
                " goto {" + strSubRange(marksStr, 0, strlen(marksStr) - 2) + "}"
        }
    }
}

printVnemoProg(p: VnemoProg) -> void {
    iter(p.decls, \v -> println("var " + v.name + ": " + type2str(v.type)));
    iter(p.operators, \v -> println(oper2str(v)));
}

vnemoProg2str(p: VnemoProg) -> string {
    fold(p.decls, "", \ acc, v -> { acc + "var " + v.name + ": " + type2str(v.type)  + "\n" })
    +
    fold(p.operators, "", \ acc, v -> { acc + oper2str(v) + "\n" });
}