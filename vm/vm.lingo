
program = decl*:d operation*:o {Prog(:d, :o)};

// Types
decl = ws "var" ws letters$l ws ":" ws type:t ws ";" ws {VarDecl($l, :t)};
type = int | array;
int = ws "int" ws {Int()};
array = ws "[" type:t "]" ws {Array(:t)};
mark = ws ('0'-'9')+$d ws ","* ws {Mark(s2i($d))};

// Operations
operation = cond | print | assign ;
condop = ws expr:le ws logOp$o expr:re ws {CondOp($o, :le, :re)};
cond = ws digits$l ws ":" ws "if" ws "(" condop:c ")" ws "then" ws "goto" ws "{" mark*:le "}" 
    ws "else" ws "goto" ws "{" mark*:lr "}" ws ";" ws {IfElse(s2i($l), :c, :le, :lr)};
print = ws digits$l ws ":" ws "print(" expr:e ")" ws "goto" ws "{" mark*:ls "}" ws ";" ws {Print(s2i($l), :e, :ls)};
assign = ws digits$l ws ":" ws var:v ws "=" expr:e "goto" ws "{" mark*:ls "}" ws ";" ws {Assign(s2i($l), :v, :e, :ls)};

// Expressions
expr = const | var | binop | app | upd;
const = ws digits$d ws {Const(s2i($d))};
var = ws letters$l ws {Var($l)};
binop = ws "(" expr:l arOp$s expr:r ")" ws {BinOp($s, :l, :r)};
app = ws "(" ws "app" ws "(" expr:l "," expr:r ")" ws ")" ws {App(:l, :r)};
upd = ws "(" ws "upd" ws "(" expr:l "," expr:m "," expr:r ")" ws ")" ws {Upd(:l, :m, :r)};

// Base
digits = ('0'-'9')+;
letters = ('a'-'z')+;
logOp = ("==" | "<=" | ">=" | "<" | ">" | "!=");
arOp = ("+" | "*" | "/" | "-" | "%");

// Whitespace
ws = (' ' | '\t' | '\n' | '\r')*;