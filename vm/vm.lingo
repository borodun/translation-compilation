program = decl*:d operation*:o { Prog(:d, :o) };

// Types
decl = ws "var" ws letters$l ws ":" ws type:t ws ";" ws { VarDecl($l, :t) };
type = Int | Array;
Int = ws "int" ws { Int() };
Array = ws "[" type:t "]" ws { Array(:t) };

// Operations
operation = cond | print | assign ;

condop = ws expr:le ws logOp$o expr:re ws { CondOp($o, :le, :re) };
cond = ws digits$l ws ":" ws "if" ws "(" condop:c ")" ws "then" ws "goto"
       ws "{" utilInt*:le "}" ws "else" ws "goto" ws "{" utilInt*:lr "}" ws ";"
       ws { CondOper(s2i($l), :c, :le, :lr) };

print = ws digits$l ws ":" ws "print(" expr:e ")"
    ws "goto" ws "{" utilInt*:ls "}" ws ";" ws { PrintOper(s2i($l), :e, :ls) };

assign = ws digits$l ws ":" ws var:v ws "=" expr:e "goto"
          ws "{" utilInt*:ls "}" ws ";" ws { AssignOper(s2i($l), :v, :e, :ls) };

// Expressions
expr = const | var | binop | app | upd;
const = ws digits$d ws { ConstExpr(s2i($d)) };
var = ws letters$l ws { VarExpr($l) };
binop = ws "(" expr:l arithmeticOp$s expr:r ")" ws { BinOpExpr($s, :l, :r) };
app  = ws "(" ws "app" ws "(" expr:l "," expr:r ")" ws ")" ws { AppExpr(:l, :r) };
upd = ws "(" ws "upd" ws "(" expr:l "," expr:m "," expr:r ")" ws ")" ws { UpdExpr(:l, :m, :r) };

// Base
digits = ('0'-'9')+;
letters = ('a'-'z')+;
logOp = ("==" | "<=" | ">=" | "<" | ">" | "!=");
arithmeticOp = ("+" | "*" | "/" | "-" | "%");

// Whitespace
ws = (' ' | '\t' | '\n' | '\r')*;